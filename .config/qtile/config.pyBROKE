# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from typing import List  # noqa: F401

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Screen
from libqtile.lazy import lazy
from libqtile import hook

import os
import socket
import subprocess

@hook.subscribe.startup
def autostart():
   home = os.path.expanduser('/home/gabriel/.config/qtile/autostart.sh')
   subprocess.call([home])

mod = "mod4"

keys = [
    # Switch between windows in current stack pane
    Key([mod], "k", lazy.layout.down(),
        desc="Move focus down in stack pane"),
    Key([mod], "j", lazy.layout.up(),
        desc="Move focus up in stack pane"),

    # Move windows up or down in current stack
    Key([mod, "control"], "k", lazy.layout.shuffle_down(),
        desc="Move window down in current stack "),
    Key([mod, "control"], "j", lazy.layout.shuffle_up(),
        desc="Move window up in current stack "),

    # Switch window focus to other pane(s) of stack
    Key([mod], "space", lazy.layout.next(),
        desc="Switch window focus to other pane(s) of stack"),

    # Swap panes of split stack
    Key([mod, "shift"], "space", lazy.layout.rotate(),
        desc="Swap panes of split stack"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),
    Key([mod], "Return", lazy.spawn("xterm")
        , desc="Launch xterm"),
    Key([mod], "b", lazy.spawn("google-chrome-stable")
        , desc="Launch a web browser"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout()
        , desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill()
        , desc="Kill focused window"),

    Key([mod, "control"], "r", lazy.restart()
        , desc="Restart qtile"),
    Key([mod, "control"], "q", lazy.shutdown()
        , desc="Shutdown qtile"),
    Key([mod], "r", lazy.spawncmd(),
        desc="Spawn a command using a prompt widget"),
    
    Key([], "XF86AudioMute", lazy.spawn("amixer -q set Master togglemute"),
        desc="Mute the audio"),
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -c 0 set Master 2dB-"),
        desc="Lower volume"),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer -c 0 set Master 2dB+"),
        desc="Raise volume"),    
]

groups = [Group(i) for i in "123"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen()),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])


layouts = [
    layout.MonadTall(border_focus='#8fa1b3', border_normal='#2d303b', margin=20),
]

##### COLORS #####
colors = [["#2b303b", "#2b303b"], # panel background
          ["#434758", "#434758"], # background for current screen tab
          ["#ffffff", "#ffffff"], # font color for group names
          ["#ff5555", "#ff5555"], # border line color for current tab
          ["#b48ead", "#b48ead"], # border color for other tab and odd widget
          ["#8fa1b3", "#8fa1b3"], # color for the even widgets
          ["#579cef", "#579cef"]] # window name

##### PROMPT #####
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())



widget_defaults = dict(
    font='Menlo for Powerline',
    fontsize=14,
    padding=3,
)
extension_defaults = widget_defaults.copy()

def init_widgets_list():
    widgets_list = [
        widget.GroupBox(
                margin_y = 3,
                margin_x = 0,
                padding_y = 5,
                padding_x = 5,
                borderwidth = 3,
                active = colors[2],
                inactive = colors[2],
                rounded = False,
                highlight_color = colors[1],
                highlight_method = "block",
                this_current_screen_border = colors[5],
                this_screen_border = colors [4],
                other_current_screen_border = colors[0],
                other_screen_border = colors[0],
                foreground = colors[2],
                background = colors[0]
            ),
        widget.Prompt(
                prompt=prompt,
                foreground = colors[2],
                background = colors[1],
                padding=10
            ),
        widget.Sep(
                linewidth = 0,
                padding = 10,
                foreground = colors[2],
                background = colors[0]
            ),
        widget.WindowName(
                foreground = colors[2],
                background = colors[0],
                padding = 0
            ),
        widget.TextBox(
                text='  ',
                background = colors[0],
                foreground = colors[4],
                padding=0,
            ),
        widget.TextBox(
                text='',
                background = colors[0],
                foreground = colors[4],
                padding=0,
                fontsize=18
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[5],
                padding=0,
            ),
        widget.TextBox(
                text="Cpu: ",
                padding = 2,
                foreground=colors[2],
                background=colors[4],
                ),
        widget.ThermalSensor(
                foreground=colors[2],
                background=colors[4],
                padding = 0,
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[5],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[4],
                padding=0,
                ),
        widget.TextBox(
                text="Mem: ",
                foreground=colors[2],
                background=colors[5],
                padding = 0,
            ),
        widget.Memory(
                foreground = colors[2],
                background = colors[5],
                padding = 0
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[4],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[4],
                padding=0,
            ),
        widget.Wlan(
                interface = "wlp1s0",
                disconnected_message="Disconnected",
                format="{essid} {percent:2.0%}",
                foreground = colors[2],
                background = colors[4],
                padding = 0
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[5],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[2],
                padding=0,
            ),
        widget.TextBox(
                text="Vol: ",
                foreground=colors[2],
                background=colors[5],
                padding = 0
            ),
        widget.Volume(
                foreground = colors[2],
                background = colors[5],
                padding = 0
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[4],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[2],
                padding=0,
            ),
        widget.Battery(
                foreground = colors[2],
                background = colors[4],
                padding = 0
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[5],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[5],
                padding=0,
            ),
        widget.Clock(
                foreground = colors[2],
                background = colors[5],
                format="%A, %B %d  [%H:%M]",
            ),
        widget.TextBox(
                text=' ',
                background = colors[5],
                foreground = colors[4],
                padding=0,
                fontsize=16
            ),
        widget.TextBox(
                text=f' Lang: ',
                background = colors[4],
                foreground = colors[2],
                padding=0,
            ),
        widget.KeyboardLayout(
                configured_keyboards=['us', 'es'],
                background = colors[4],
                foreground = colors[2],
                padding=0,
            ),
        widget.TextBox(
                text=' ',
                background = colors[4],
                foreground = colors[5],
                padding=0,
            ),
        widget.Sep(
                linewidth = 0,
                padding = 0,
                foreground = colors[0],
                background = colors[5]
            ),
        widget.Systray(
                background=colors[0],
                padding = 0
            ),
        ]
    return widgets_list



screens = [
    Screen(
        top=bar.Bar(widgets=init_widgets_list(), size=20)
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    {'wmclass': 'confirm'},
    {'wmclass': 'dialog'},
    {'wmclass': 'download'},
    {'wmclass': 'error'},
    {'wmclass': 'file_progress'},
    {'wmclass': 'notification'},
    {'wmclass': 'splash'},
    {'wmclass': 'toolbar'},
    {'wmclass': 'confirmreset'},  # gitk
    {'wmclass': 'makebranch'},  # gitk
    {'wmclass': 'maketag'},  # gitk
    {'wname': 'branchdialog'},  # gitk
    {'wname': 'pinentry'},  # GPG key password entry
    {'wmclass': 'ssh-askpass'},  # ssh-askpass
])
auto_fullscreen = True
focus_on_window_activation = "smart"

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
